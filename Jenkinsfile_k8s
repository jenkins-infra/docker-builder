// buildDockerAndPublishImage('builder', [mainBranch: 'main'])
import java.text.SimpleDateFormat;
import java.util.Date;

def config = [:]
def imageName = 'builder'
config.mainBranch = 'main'

if (!config.registry) {
  if (infra.isTrusted() || infra.isInfra()) {
    config.registry = "jenkinsciinfra/"
  } else {
    config.registry = "jenkins4eval/"
  }
}

if (!config.dockerfile) {
  config.dockerfile = "Dockerfile"
}

if (!config.credentials) {
  config.credentials = "jenkins-dockerhub"
}

if (!config.mainBranch) {
  config.mainBranch = "master"
}

pipeline {
  agent {
    kubernetes {
      label 'build-publish-docker'
      inheritFrom 'jnlp-linux'
      yaml '''
apiVersion: "v1"
kind: "Pod"
metadata:
  labels:
    jenkins: "agent"
  annotations:
    container.apparmor.security.beta.kubernetes.io/dev: unconfined
    container.seccomp.security.alpha.kubernetes.io/dev: unconfined
spec:
  tolerations:
  - key: "os"
    operator: "Equal"
    value: "linux"
    effect: "NoSchedule"
  - key: "profile"
    operator: "Equal"
    value: "highmem"
    effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/os
            operator: In
            values:
            - linux
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: agentpool
            operator: In
            values:
            - highmemlinux
  restartPolicy: "Never"
  containers:
    - name: dev
      image: jenkinsciinfra/builder:latest
      command:
      - cat
      tty: true
      '''
    }
  }

  environment {
    BUILD_DATE = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX").format(new Date())
    IMAGE_NAME = "${config.registry}${imageName}"
    DOCKERFILE = "${config.dockerfile}"
  }

  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    timeout(time: 60, unit: "MINUTES")
    ansiColor("xterm")
    preserveStashes()
  }

  stages {
    stage("Build") {
      steps {
        container('dev') {
          withCredentials([usernamePassword(credentialsId: config.credentials, usernameVariable: 'DOCKER_USR', passwordVariable: 'DOCKER_PSW')]) {
            sh "echo $DOCKER_PSW | img login -u $DOCKER_USR --password-stdin"
          }
          sh 'make build'
          sh 'make image.tar'
          stash name: 'image', includes: 'image.tar'
        }
      }
    } // stage
    stage("Test") {
      steps {
        container('dev') {
          unstash 'image'
          sh 'make test'
        }
      }
    } // stage
    stage("Deploy latest") {
      when { branch "${config.mainBranch}" }
      steps {
        container('dev') {
          sh "IMAGE_DEPLOY=${IMAGE_NAME}:${config.mainBranch} make deploy"
          sh "IMAGE_DEPLOY=${IMAGE_NAME}:latest make deploy"
          script {
            if (currentBuild.description) {
              currentBuild.description = currentBuild.description + " / "
            }
            currentBuild.description = "${config.mainBranch} / ${GIT_COMMIT}"
          } // script
        } // container
      } // steps
    } // stage
    stage("Deploy tag as tag") {
      when { buildingTag() }
      steps {
        container('dev') {
          sh "IMAGE_DEPLOY=${IMAGE_NAME}:${TAG_NAME} make deploy"
          script {
            if (currentBuild.description) {
              currentBuild.description = currentBuild.description + " / "
            }
            currentBuild.description = "${TAG_NAME}"
          } // script
        } // container
      } // steps
    } // stage
  } // stages
  post {
    cleanup {
      container('dev') {
        sh "img logout"
      } // container
    } // cleanup
  } // post
} // pipeline
